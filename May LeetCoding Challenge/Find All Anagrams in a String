#  Find All Anagrams in a String

###### tags: `LeetCode`

## 題目

Given a string **s** and a **non-empty** string **p**, find all the start indices of **p**'s anagrams in **s**.

Strings consists of lowercase English letters only and the length of both strings **s** and **p** will not be larger than 20,100.

The order of output does not matter.

**Example 1:**

    Input:
    s: "cbaebabacd" p: "abc"
    Output:
    [0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc"
    
**Example 2:**

    Input:
    s: "abab" p: "ab"

    Output:
    [0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

:arrow_right:[題目連結](https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/534/week-1-may-1st-may-7th/3332/)

## C++程式碼
```C++
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> index;
        map<char, int> mS, mP;
        int sL=s.length(), pL=p.length();
        bool isEqual;
        
        for(char c:p) mP[c]++;
        
        for(int i=0; i<sL; i++){
            isEqual = true;
            mS[s.at(i)]++;
            
            if(i >= pL-1){ 
                int startIndex = i-pL+1;
                cout << s.at(startIndex);
                for(pair p:mP) 
                    if(mS[p.first] != p.second) {isEqual = false; break;}
                if(isEqual) index.push_back(startIndex);
                
                mS[s.at(startIndex)]--;
            }
        }
        
        return index;
    }
};
